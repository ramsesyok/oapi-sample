// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// GetLandmarks 登録地点の一覧を返します.
	// (GET /landmarks)
	GetLandmarks(ctx echo.Context, params GetLandmarksParams) error
	// PostLandmarks 新しい地点を登録します.
	// (POST /landmarks)
	PostLandmarks(ctx echo.Context) error
	// PostLandmarksSearch 検索条件を指定して検索します.
	// (POST /landmarks/_search)
	PostLandmarksSearch(ctx echo.Context) error
	// DeleteLandmarksID 指定された地点データを削除します.
	// (DELETE /landmarks/{id})
	DeleteLandmarksID(ctx echo.Context, id int) error
	// GetLandmarksID 指定された地点データを取得します.
	// (GET /landmarks/{id})
	GetLandmarksID(ctx echo.Context, id int) error
	// PutLandmarksID 指定地点更新 指定された地点データを更新します.
	// (PUT /landmarks/{id})
	PutLandmarksID(ctx echo.Context, id int) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetLandmarks converts echo context to params.
func (w *ServerInterfaceWrapper) GetLandmarks(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLandmarksParams
	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "perPage" -------------

	err = runtime.BindQueryParameter("form", true, true, "perPage", ctx.QueryParams(), &params.PerPage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perPage: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLandmarks(ctx, params)
	return err
}

// PostLandmarks converts echo context to params.
func (w *ServerInterfaceWrapper) PostLandmarks(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostLandmarks(ctx)
	return err
}

// PostLandmarksSearch converts echo context to params.
func (w *ServerInterfaceWrapper) PostLandmarksSearch(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostLandmarksSearch(ctx)
	return err
}

// DeleteLandmarksID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteLandmarksID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteLandmarksID(ctx, id)
	return err
}

// GetLandmarksID converts echo context to params.
func (w *ServerInterfaceWrapper) GetLandmarksID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLandmarksID(ctx, id)
	return err
}

// PutLandmarksID converts echo context to params.
func (w *ServerInterfaceWrapper) PutLandmarksID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutLandmarksID(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/landmarks", wrapper.GetLandmarks)
	router.POST(baseURL+"/landmarks", wrapper.PostLandmarks)
	router.POST(baseURL+"/landmarks/_search", wrapper.PostLandmarksSearch)
	router.DELETE(baseURL+"/landmarks/:id", wrapper.DeleteLandmarksID)
	router.GET(baseURL+"/landmarks/:id", wrapper.GetLandmarksID)
	router.PUT(baseURL+"/landmarks/:id", wrapper.PutLandmarksID)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
