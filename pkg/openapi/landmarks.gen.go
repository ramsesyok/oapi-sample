// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// GetLandmarks 登録地点の一覧を返します.
	// (GET /landmarks)
	GetLandmarks(ctx echo.Context, params GetLandmarksParams) error
	// PostLandmarks 新しい地点を登録します.
	// (POST /landmarks)
	PostLandmarks(ctx echo.Context) error
	// PostLandmarksSearch 検索条件を指定して検索します.
	// (POST /landmarks/_search)
	PostLandmarksSearch(ctx echo.Context) error
	// DeleteLandmarksID 指定された地点データを削除します.
	// (DELETE /landmarks/{id})
	DeleteLandmarksID(ctx echo.Context, id int) error
	// GetLandmarksID 指定された地点データを取得します.
	// (GET /landmarks/{id})
	GetLandmarksID(ctx echo.Context, id int) error
	// PatchLandmarksID 指定地点部分更新 指定された地点データを更新します.
	// (PATCH /landmarks/{id})
	PatchLandmarksID(ctx echo.Context, id int) error
	// PutLandmarksID 指定地点更新 指定された地点データを更新します.
	// (PUT /landmarks/{id})
	PutLandmarksID(ctx echo.Context, id int) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetLandmarks converts echo context to params.
func (w *ServerInterfaceWrapper) GetLandmarks(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLandmarksParams
	// ------------- Required query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, true, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Required query parameter "perPage" -------------

	err = runtime.BindQueryParameter("form", true, true, "perPage", ctx.QueryParams(), &params.PerPage)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter perPage: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLandmarks(ctx, params)
	return err
}

// PostLandmarks converts echo context to params.
func (w *ServerInterfaceWrapper) PostLandmarks(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostLandmarks(ctx)
	return err
}

// PostLandmarksSearch converts echo context to params.
func (w *ServerInterfaceWrapper) PostLandmarksSearch(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostLandmarksSearch(ctx)
	return err
}

// DeleteLandmarksID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteLandmarksID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteLandmarksID(ctx, id)
	return err
}

// GetLandmarksID converts echo context to params.
func (w *ServerInterfaceWrapper) GetLandmarksID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLandmarksID(ctx, id)
	return err
}

// PatchLandmarksID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchLandmarksID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchLandmarksID(ctx, id)
	return err
}

// PutLandmarksID converts echo context to params.
func (w *ServerInterfaceWrapper) PutLandmarksID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutLandmarksID(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/landmarks", wrapper.GetLandmarks)
	router.POST(baseURL+"/landmarks", wrapper.PostLandmarks)
	router.POST(baseURL+"/landmarks/_search", wrapper.PostLandmarksSearch)
	router.DELETE(baseURL+"/landmarks/:id", wrapper.DeleteLandmarksID)
	router.GET(baseURL+"/landmarks/:id", wrapper.GetLandmarksID)
	router.PATCH(baseURL+"/landmarks/:id", wrapper.PatchLandmarksID)
	router.PUT(baseURL+"/landmarks/:id", wrapper.PutLandmarksID)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
