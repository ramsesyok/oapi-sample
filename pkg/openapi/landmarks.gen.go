// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// GetLandmarks 登録されている登録地点のインデックス一覧を返します.
	// クエリパラメータnameを使って地点名称によるフィルタをかけることができます。(部分一致)
	// (GET /landmarks)
	GetLandmarks(ctx echo.Context, params GetLandmarksParams) error
	// PostLandmarks 新しい地点を登録します.
	// (POST /landmarks)
	PostLandmarks(ctx echo.Context) error
	// PostLandmarksSearch 検索条件を指定して検索します.
	// (POST /landmarks/_search)
	PostLandmarksSearch(ctx echo.Context) error
	// DeleteLandmarksID 指定された地点データを削除します.
	// (DELETE /landmarks/{id})
	DeleteLandmarksID(ctx echo.Context, id int) error
	// GetLandmarksID 指定された地点データを取得します.
	// (GET /landmarks/{id})
	GetLandmarksID(ctx echo.Context, id int) error
	// PatchLandmarksID 指定地点部分更新 指定された地点データを更新します.
	// (PATCH /landmarks/{id})
	PatchLandmarksID(ctx echo.Context, id int) error
	// PutLandmarksID 指定地点更新 指定された地点データを更新します.
	// (PUT /landmarks/{id})
	PutLandmarksID(ctx echo.Context, id int) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetLandmarks converts echo context to params.
func (w *ServerInterfaceWrapper) GetLandmarks(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLandmarksParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLandmarks(ctx, params)
	return err
}

// PostLandmarks converts echo context to params.
func (w *ServerInterfaceWrapper) PostLandmarks(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostLandmarks(ctx)
	return err
}

// PostLandmarksSearch converts echo context to params.
func (w *ServerInterfaceWrapper) PostLandmarksSearch(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostLandmarksSearch(ctx)
	return err
}

// DeleteLandmarksID converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteLandmarksID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteLandmarksID(ctx, id)
	return err
}

// GetLandmarksID converts echo context to params.
func (w *ServerInterfaceWrapper) GetLandmarksID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetLandmarksID(ctx, id)
	return err
}

// PatchLandmarksID converts echo context to params.
func (w *ServerInterfaceWrapper) PatchLandmarksID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchLandmarksID(ctx, id)
	return err
}

// PutLandmarksID converts echo context to params.
func (w *ServerInterfaceWrapper) PutLandmarksID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", ctx.Param("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PutLandmarksID(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/landmarks", wrapper.GetLandmarks)
	router.POST(baseURL+"/landmarks", wrapper.PostLandmarks)
	router.POST(baseURL+"/landmarks/_search", wrapper.PostLandmarksSearch)
	router.DELETE(baseURL+"/landmarks/:id", wrapper.DeleteLandmarksID)
	router.GET(baseURL+"/landmarks/:id", wrapper.GetLandmarksID)
	router.PATCH(baseURL+"/landmarks/:id", wrapper.PatchLandmarksID)
	router.PUT(baseURL+"/landmarks/:id", wrapper.PutLandmarksID)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xa/1PbyBX/V5htf2hnjLHBJuDfuCNpmTaFNtO5maaejmIvRney5KwkBo7xDJKS4Bxc",
	"ITRAuCPHcSHAEb5dkzZAyPHHLJLhv+jsrmTJkmxMgKSZ4zdJlt6+93mf92XfegRkpHxBEqGoyCA1AhCU",
	"C5IoQ3rzCZf9C7yrQlkhdxlJVKBIL7lCQeAznMJLYsvnsiSSZ3JmAOY5cpWFcgbxBfIrSHmFREABSQWI",
	"FJ7J51BOzTsrc9ksTz7hhD7PSwpSYcQnERtL2DCw/gYbB1jfNQ9mrJkdEAHKcAGCFJDufA4zCihGQB7K",
	"MpeDPdmgVj4Zx5tPzNJzc3Mqerw2erz+HTZmsL6E9WVsvMDaFtY3yXvamjk1Ya0+AREAh7h8QSDL9RYg",
	"okj0ZKOJWCIaj8ZdXWQF8WIORMBQc05qFrk8eXjTVqub6IgYNuE6rmN9G+trWN/DRqmiY9Xyyc+GutXr",
	"cvdn+fiXMfjp4Clr264ga9uL8whmQeq2RxEvcBGPk9IBiImMujpj/Z59a6xj4xE2fqTAH2D9EGtb5ugy",
	"1ibKMzvm7i69/h5rz7C2aM3rBHRjgwp5io2XWN8jYH2KIKfA7DnY6EjwUzHDnoe54ejtglWawtoc1hZd",
	"nvR0Y23Cmtnx663r1uyYuTlnluawtka/WrF2l7A2g/UJrI9Hvd6L13eWrSwjyi+BzL3JXKxrsHWwd6jz",
	"919eU/524WR23dwwmd9SUPfKjxet0hTxcJCW3VCA56OlI8FPyyx7Hgao+fCrk/llLy3LM+vm5Ov3wkxb",
	"3ytmXhgzXU+flZmMCOHM7BEViEROuAXRIETXEZLQOVgaJu2qpn+EZDtbTe/q6zEf3D8x1syxlfLUA6yt",
	"spJNavf8fvnxIktCNav2nyTlhqSK58mPFRFXdAvSTbTBCVPyeGUca8tYG8f6Q6ytkwtaEN5vI+O47yMJ",
	"Dw+gZ40Va2LM3PrGBklb9OZpFi7UIatY+5p6417NoPlrIXvOVteR4A+ZqwxajyIRoDLcwta2vn1lze58",
	"oJ7L9ucZeOxactaeghka1lMUIzbhKJdu8IIC0Q0eCqGemsH6M8IV/dAy7pvf/xTgYr/zZbXhRUfdgAOW",
	"F8qvfrBm96yXMwQ6Uc0TAOCQgrgMHTBwSOE5gS4E+/khEAGy2k8u0mHoEgHNgxwiEMtE0nUm6SanZAZA",
	"BPQxcZVbKvMmR29uUbnsp3QxAgY5QYUhtvicxUx2XreVSoeUnj9yYjbPoS9o3AtCbz9I3R7x4ceHbQwW",
	"dsr6npeePpIhyGV7RWHYKY32yryowBxEPtb1dNMHElfgmzNSFuag2Ezhbla4HNUhJ6E8SIEC4vMcGv4C",
	"DjNy+e0ZAb9GsB+kwK9a3JFTi82lFsdYT+Emn3iB42lqJlpVMzcCBE7hFTVLfhAkMedcc4L9OF1M+8nu",
	"rNfE0KrQs6YXesQsHAqCXfVzlTCaJl9iY4xm1G0SPMHdnUdUuButFf14RavKbdbTn472N06Mt9butjmx",
	"f/zVU/P+hrkwjbUXWNOxPl5+PWlOlU6+fWO9/MFcekzKzahmbT4zDybNqa/LqztY27bmnlsLG1Xv0G/x",
	"qB7IlcXIu/HsEnhlE6CGLsy6ELCwfoiNbWwchNaB03VQRf6uChmvG6Fkuj6R+EyI/0F98hztjh6vrAbn",
	"VpLKOgN/6h1jUzbW1tbxCnGuAvNyHRmVpSsvNhLJLGDcRMAhxA0HsiHT3xFdD7e+2qET8k51KJIOaw4b",
	"m3QE+QDrz4L7CCdXBGSfvHhi7q/czqe9OLa1tUVAv4TynAJSoF+QOMWllqjm7zBkP54Ar6TQgJrl19vE",
	"/izMVSOQjLYnO9rjnW2xRDIWS3jgyErqHQGG4eFm5+Ay/5kIWybe1hm9lkgmYslYR2trvK21oXU+eJKo",
	"yeJbkEOZgT+rEA3XzwA14r2fNlynxaC3LSuSpigHw+L7G9bmV5J3MDUUIOoL/dicnDV/nvOlmeD3soSU",
	"05S9JSHFVtWXHKjerhL1soPcIJoVp1dSZ2slr932pgEa4b7m8/LjktTZuDcag2HmiaGQ4LCrq5/RpJdy",
	"bWtN1LbN3NeOS//E2jZRvWLw7I65dUhsfn7IrrH2wno4ai6sYW0e6+Pez7G25QgJ2Nbqt62jM9HRGU/G",
	"2hOdsc5kwLr2znh7x7X2WLKt49q1ttrmEWpICieAVKL4biXyfZXFYEWsqF5zpfLryXAlffHC5EQaKKpu",
	"zAVXZXtAo3RBWzZX3uyeOfXIs2vj5IzdNzW4OSNad8kZSOeA5KYbsrt0rU1Wjc0VeZ0X+yVqBq/QIlDJ",
	"JE1dfT1NzXYDUZ5/czLx766+HrJjg0hmNsWjMWKwVIAiV+BBCrRFY9FWuv1UBihKLYI3MeUgJaDkDkVA",
	"CvwOKm72ojtXLg8ViFgm8lPhR9oPPsTGd5QT2yFl7Gh/gzidvH+XFphKvNgtqjsp8m9R05Hqk//WWOxM",
	"k6cGG0La+IaMHnr/QOBMsEXDZFWUa/H8naAYAclGPgk7tqBzDDVPdhY+VzQxlzsjvBWs3SOpnT5knKCj",
	"r/D+HOvTx4eP6ZznZ6zNR/8u1jr+Ji7B+vTR20M6LVrxNiekoOglkjg9ExSsT9Pp7SPyXPsXHSdNOKNE",
	"shge1X9zYqyZpQdEl7FXv6UFXJJDqNcnyVXcswdIn0jZ4Qt3e5i/HYhJ6fBtwN0oVpAKi+G8rO9v54z/",
	"3SiViCVO/6RyHnFxHKzySZMzZrxnU06fdjBzqEU/d9NMyz9k2loSVRpwOutDL9n13mb3Elhwobr+X+al",
	"EJc12SPQp0tHb/6L9WnnwIFOlulPtSkywmeL7r8Kggxhp/qVBemI5uzh5/yX4QPGUsCQJt+5jB1VToOF",
	"9WnP3yls7CKnl+2aCF16BnWY+WHwrcagAXDZbrEK3DP2O3XmjLTjIZ2X2/DQwVx1Eglpf9w+Ok1bN5Y9",
	"fVmTPPY7/PJSpnf+HXK6aJ8/XU7ddA4MP7K66XOQzUYGD+uHGGyn09RzvOfSVA0rpary/ihxRYQGiaAq",
	"tWjw7gSgS9AlWZpSkQBSYEBRCqmWFkHKcMKAJCupjlhHDBTTxf8FAAD//+OmVQpPLQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
